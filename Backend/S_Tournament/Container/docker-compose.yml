services:
  web:
    build:
      context: ./django
      args:
        - VOLUME=${DJANGO_WORKDIR:-/home/Tournament_back}
        - LAUNCH=${DJANGO_LAUNCH_REPO:-/run/launch}
    container_name: django_tournament
    command: ["uvicorn", "djap_tournament.asgi:application", "--host", "0.0.0.0", "--port", "8000"]
    ports:
      - "8003:8000"
    volumes:
      - ../../Tournament:${DJANGO_WORKDIR:-/home/Tournament_back}
    environment:
      - POSTGRES_USER=${SQL_USER:-default_us}
      - POSTGRES_PASSWORD=${SQL_PASSWORD:-default_ps}
      - POSTGRES_DB=${SQL_DATABASE:-default_db}
    env_file:
      - .env
    depends_on:
      - pong_psql
    networks:
      - backend
      - Tournament_back_db
    restart: always

  db:
    container_name: postgreSQL_Tournament
    build:
      context: ./postgresql
      args:
        - POSTGRES_USER=${SQL_USER:-default_us}
        - POSTGRES_PASSWORD=${SQL_PASSWORD:-default_ps}
        - POSTGRES_DB=${SQL_DATABASE:-default_db}
    volumes:
      # - /home/tdutel/data/Tournament_back:${PSQL_DATA_REPO}
      # - /sgoinfre/tdutel/data/Tournament:${PSQL_DATA_REPO}
      - Tournament_v:${PSQL_DATA_REPO}
    env_file:
      - .env
    ports:
      - "5433:5432"
    networks:
      - Tournament_back_db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $USER"]
      start_period: 5s
      retries: 10
      interval: 15s
      timeout: 10s
    restart: on-failure

networks:
  backend:
    external: true
  Tournament_back_db:
    name: Tournament_back_db
    driver: bridge

volumes:
  Tournament_v:
    driver: local
    name: Tournament_v
