services:
  api_web:
    build:
      context: ./Backend/S_API/Container/django
      args:
        - VOLUME=${DJANGO_WORKDIR_API:-/home/API}
        - LAUNCH=${DJANGO_LAUNCH_REPO:-/run/launch}
    container_name: django-API
    command: python manage.py runserver 0.0.0.0:8000 
    ports:
      - "8000:8000"
    volumes:
      - ./Backend/S_API/djpr_API:${DJANGO_WORKDIR_API:-/home/API}
    environment:
      - POSTGRES_USER=${PSQL_USER:-default_us}
      - POSTGRES_PASSWORD=${PSQL_PASS:-default_ps}
      - POSTGRES_DB=${SQL_DATABASE_API:-default_db}
    env_file:
      - .env
    depends_on:
      api_psql:
        condition: "service_healthy"
    networks:
      - backend
      - frontend
      - api_db
    restart: always

  api_psql:
    container_name: postgreSQL-API
    build:
      context: ./Backend/S_API/Container/postgresql
      args:
        - POSTGRES_USER=${PSQL_USER:-default_us}
        - POSTGRES_PASSWORD=${PSQL_PASS:-default_ps}
        - POSTGRES_DB=${SQL_DATABASE_API:-default_db}
    volumes:
      - API_v:${PSQL_DATA_REPO}
    env_file:
      - .env
    ports:
      - "5432:5432"
    networks:
      - api_db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $PSQL_USER -d $SQL_DATABASE_API"] # Celle la est la bonne mais elle fait waiting a l'infinie
      start_period: 5s
      retries: 10
      interval: 15s
      timeout: 10s
    restart: on-failure

      # test: ["CMD-SHELL", "pg_isready -U $USER"] # Celle la fonctionne mais fait une fatal car elle teste avec un user qui n'existe pas
networks:
  backend:
    name: backend
    driver: bridge

  frontend:
    name: frontend
    driver: bridge
  
  api_db:
    name: api_db
    driver: bridge

volumes:
  API_v:
    driver: local
    name: API_v
